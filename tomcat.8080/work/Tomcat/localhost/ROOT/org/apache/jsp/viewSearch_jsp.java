/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/11.0.4
 * Generated at: 2025-03-17 14:20:48 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;

public final class viewSearch_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(4);
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("java.util.HashMap");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <title>Activity List</title>\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"static/styles.css\">\r\n");
      out.write("    <style>\r\n");
      out.write("        body {\r\n");
      out.write("            display: block;\r\n");
      out.write("            justify-content: normal;\r\n");
      out.write("            align-items: normal;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        h1 {\r\n");
      out.write("            margin-bottom: 20px;\r\n");
      out.write("            padding-top: 60px;\r\n");
      out.write("        }\r\n");
      out.write("        p:hover{\r\n");
      out.write("            transform: scale(1);\r\n");
      out.write("        }\r\n");
      out.write("        .activity {\r\n");
      out.write("            margin: 20px;\r\n");
      out.write("            padding: 15px;\r\n");
      out.write("            background-color: rgba(18, 61, 115, 0.8);\r\n");
      out.write("            border-radius: 10px;\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<nav>\r\n");
      out.write("    <a href=\"http://localhost:8080\">Home</a>\r\n");
      out.write("    <a href=\"search.html\">Search</a>\r\n");
      out.write("</nav>\r\n");
      out.write("\r\n");
      out.write("\r\n");

    HashMap<String, List<List<String>>> plan = (HashMap<String, List<List<String>>>) request.getAttribute("Plan");
    List<String> search = plan.get("ignore").get(0);
    String searchFormat= search.toString();
 
      out.write("\r\n");
      out.write("<h1> &emsp;  Displaying results for: ");
      out.print(searchFormat);
      out.write("</h1> ");

    if (plan != null && !plan.isEmpty()) {
        List<String> keys = new ArrayList<>(plan.keySet());
        for (String key : keys) {
            List<List<String>> activities = plan.get(key);
            if (activities != null) {
                for (List<String> activity : activities) {

                    if (activity != null && activity.size() >= 4) {
                        String day = activity.get(5);
                        String subject = activity.get(0);
                        String time = activity.get(1);
                        String note = activity.get(2);
                        String complete = activity.size() > 4 ? activity.get(3) : "FALSE";
                        String url = activity.get(4);

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<div class=\"activity\">\r\n");
      out.write("    <p>Day: ");
      out.print( day );
      out.write("</p>\r\n");
      out.write("    <p>Period: ");
      out.print( key );
      out.write("</p>\r\n");
      out.write("    <p>Subject: ");
      out.print( subject );
      out.write("</p>\r\n");
      out.write("    <p>Time: ");
      out.print( time );
      out.write("</p>\r\n");
      out.write("    <p>Note: ");
      out.print( note );
      out.write("</p>\r\n");
      out.write("    <p>Status: ");
      out.print( "TRUE".equals(complete) ? "Completed" : "Incomplete" );
      out.write("</p>\r\n");
      out.write("\r\n");
      out.write("    <form method=\"POST\" action = \"/display.html\">\r\n");
      out.write("        <input type=\"hidden\"  name=\"date\" value=\"");
      out.print(day);
      out.write("\">\r\n");
      out.write("        <input type=\"hidden\"  name=\"subject\" value=\"");
      out.print(subject);
      out.write("\">\r\n");
      out.write("        <input type=\"hidden\"  name=\"period\" value=\"");
      out.print(key);
      out.write("\">\r\n");
      out.write("        <input type=\"hidden\"  name=\"time\" value=\"");
      out.print(time);
      out.write("\">\r\n");
      out.write("        <input type=\"hidden\"  name=\"note\" value=\"");
      out.print(note);
      out.write("\">\r\n");
      out.write("        <input type=\"hidden\"  name=\"complete\" value=\"");
      out.print(complete);
      out.write("\">\r\n");
      out.write("        <input type=\"hidden\"  name=\"url\" value=\"");
      out.print(url);
      out.write("\">\r\n");
      out.write("        <button type=\"Submit\" >VIEW</button>\r\n");
      out.write("    </form>\r\n");
      out.write("</div>\r\n");

                }
            }
        }
    }
} else {

      out.write("\r\n");
      out.write("<p>No activities found.</p>\r\n");

    }

      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
